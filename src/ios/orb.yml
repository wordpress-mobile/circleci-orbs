version: 2.1

description: |
  Simplify common tasks for building and testing iOS projects

orbs:
  bundle-install: toshimaru/bundle-install@0.1.1

executors:
  default:
    macos:
      xcode: "10.1.0"

jobs:
  test:
    description: |
      Build and test an iOS project using xcodebuild

      Note: A Gemfile with 'cocoapods' (if using) and 'xcpretty' is required. 
    parameters:
      workspace:
        type: string
      scheme:
        type: string
      configuration:
        type: string
        default: Debug
      ios-version:
        type: string
        default: "12.1"
      device:
        type: string
        default: iPhone XS
      cache-prefix:
        type: string
        default: pod-cache-v1
      install-pods:
        type: boolean
        default: true
    executor: default
    steps:
      - run:
          # xcodebuild can behave unpredictably if the simulator is not already booted, so we boot it explicitly here
          name: Boot simulator
          command: |
            # Get the UDID of the "<< parameters.device >>" with "iOS << parameters.ios-version >>"
            UDID=$(xcrun simctl list -j | jq -r "[.devices[\"iOS << parameters.ios-version >>\"][] | select (.name == \"<< parameters.device >>\" and .availability == \"(available)\")][0] | .udid")
            xcrun simctl boot $UDID # Boot simulator in the background
            echo "export SIMULATOR_UDID=$UDID" >> $BASH_ENV
          background: true
      - checkout
      - unless:
          condition: << parameters.install-pods >>
          steps:
            - bundle-install/bundle-install
      - when:
          condition: << parameters.install-pods >>
          steps:
            - cached-pod-install:
                cache-prefix: << parameters.cache-prefix >>
      - run:
          name: Wait for simulator
          command: |
            touch $BASH_ENV
            while [ -z "$SIMULATOR_UDID" ]; do
                sleep 1
                source $BASH_ENV
            done
      - run:
          name: Build
          command: |
            xcodebuild  -workspace "<< parameters.workspace >>" \
                        -scheme "<< parameters.scheme >>" \
                        -configuration "<< parameters.configuration >>" \
                        -destination "platform=iOS Simulator,id=$SIMULATOR_UDID" \
                        build-for-testing | bundle exec xcpretty
      - run:
          name: Test
          command: |
            xcodebuild  -workspace "<< parameters.workspace >>" \
                        -scheme "<< parameters.scheme >>" \
                        -configuration "<< parameters.configuration >>" \
                        -destination "platform=iOS Simulator,id=$SIMULATOR_UDID" \
                        test-without-building | bundle exec xcpretty -r junit
      - store_test_results:
          path: build/reports
  validate-podspec:
    description: |
      Run 'pod lib lint' on a provided .podspec file.

      Note: A Gemfile with 'cocoapods' is required. 
    parameters:
      podspec-path:
        type: string
      update-specs-repo:
        type: boolean
        default: false
    executor: default
    steps:
      - checkout
      - bundle-install/bundle-install
      - run:
          name: Fetch CocoaPods Specs
          command: curl https://cocoapods-specs.circleci.com/fetch-cocoapods-repo-from-s3.sh | bash -s cf
      - when:
          condition: << parameters.update-specs-repo >>
          steps:
            - run:
                name: Update CocoaPods Specs
                command: bundle exec pod repo update
      - run:
          name: Validate podspec
          command: bundle exec pod lib lint "<< parameters.podspec-path >>"

commands:
  cached-pod-install:
    description: |
      Install pods in the current project and cache the results.
      
      Note: A Gemfile with 'cocoapods' is required. 
    parameters:
      cache-prefix:
        type: string
        default: pod-cache-v1
    steps:
      - restore_cache:
          keys:
            - << parameters.cache-prefix >>-{{ checksum "Gemfile.lock" }}-{{ checksum "Podfile.lock" }}
      - run:
          name: Bundle install
          command: bundle install --path=vendor/bundle
      - run:
          name: CocoaPods check
          command: |
            function lockfile_error () {
              echo "Podfile and Podfile.lock do not match. Please run 'bundle exec pod install' and try again."
            }
            trap lockfile_error ERR

            # This verifies that the PODFILE CHECKSUM in Podfile.lock matches Podfile
            PODFILE_SHA1=$(ruby -e "require 'yaml';puts YAML.load_file('Podfile.lock')['PODFILE CHECKSUM']")
            echo "$PODFILE_SHA1 *Podfile" | shasum -c

            # Remove trap (so we don't print the lockfile error)
            trap - ERR

            if diff Podfile.lock Pods/Manifest.lock; then
              echo "Podfile.lock matches Pods/Manifest.lock. Skipping installing pods ..."
              echo 'export SKIP_POD_INSTALL=1' >> $BASH_ENV
            else
              echo "Podfile.lock does not match Pods/Manifest.lock. Pods will be installed ..."
            fi
      - run:
          name: Fetch CocoaPods Specs (if needed)
          command: test $SKIP_POD_INSTALL || curl https://cocoapods-specs.circleci.com/fetch-cocoapods-repo-from-s3.sh | bash -s cf
      - run:
          name: Pod Install (if needed)
          command: test $SKIP_POD_INSTALL || bundle exec pod install
          environment:
            COCOAPODS_DISABLE_STATS: true
      - save_cache:
          key: << parameters.cache-prefix >>-{{ checksum "Gemfile.lock" }}-{{ checksum "Podfile.lock" }}
          paths:
            - Pods/
            - vendor/bundle
