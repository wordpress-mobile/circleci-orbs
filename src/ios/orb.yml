version: 2.1

description: |
  Simplify common tasks for building and testing iOS projects

dependency_parameters: &dependency_parameters
  cache-prefix:
    description: A prefix to use for the dependencies cache key.
    type: string
    default: ios-{{ .Environment.CIRCLE_JOB }}
  bundle-install:
    description: Should 'bundle install' be run? If true, 'bundle exec' will be used for CocoaPods commands.
    type: boolean
    default: false
  bundler-working-directory:
    description: The directory containing your project's Gemfile.
    type: string
    default: .
  pod-install:
    description: Should 'pod install' be run?
    type: boolean
    default: false
  cocoapods-working-directory:
    description: The directory containing your project's Podfile and Podfile.lock.
    type: string
    default: .
  carthage-update:
    description: Should 'carthage update' be run?
    type: boolean
    default: false
  carthage-working-directory:
    description: The directory containing your project's Cartfile.
    type: string
    default: .

xcode_version_parameter: &xcode_version_parameter
  xcode-version:
    description: The Xcode version to use.
    type: string
    default: "10.1.0"

podspec_parameters: &podspec_parameters
  podspec-path:
    description: Path to the .podspec file.
    type: string
  bundle-install:
    description: Should 'bundle install' be run? If true, 'bundle exec' will be used for CocoaPods commands.
    type: boolean
    default: false

device_parameters: &device_parameters
  ios-version:
    description: The iOS simulator version to use. Defaults to the latest available version.
    type: string
    default: ""
  device:
    description: The iOS simulator device to use.
    type: string
    default: iPhone XS

test_parameters: &test_parameters
  # Executor options
  <<: *xcode_version_parameter
  # Build options
  workspace:
    description: Workspace parameter to be passed to xcodebuild. e.g. MyProject.xcworkspace. A workspace or a project is required.
    type: string
    default: ""
  project:
    description: Project parameter to be passed to xcodebuild. e.g. MyProject.xcodeproj. A workspace or a project is required.
    type: string
    default: ""
  scheme:
    description: Scheme parameter for xcodebuild. e.g. MyProject. A scheme or a target is required.
    type: string
    default: ""
  target:
    description: Target parameter for xcodebuild. e.g. MyProject. A scheme or a target is required.
    type: string
    default: ""
  configuration:
    description: Configuration paramter for xcodebuild. e.g. Debug.
    type: string
    default: Debug
  # Device parameters
  <<: *device_parameters
  # Dependency options
  <<: *dependency_parameters

orbs:
  slack: circleci/slack@3.3.0

executors:
  default:
    description: |
      An executor with sensible defaults for iOS builds.
      See supported versions here: https://circleci.com/docs/2.0/testing-ios/#supported-xcode-versions
    parameters:
      <<: *xcode_version_parameter
    macos:
      xcode: << parameters.xcode-version >>

jobs:
  test:
    description: |
      Build and test an iOS project using xcodebuild
    parameters:
      <<: *test_parameters
    executor:
      name: default
      xcode-version: << parameters.xcode-version >>
    steps:
      - checkout
      - test:
          xcode-version: << parameters.xcode-version >>
          workspace: << parameters.workspace >>
          project: << parameters.project >>
          scheme: << parameters.scheme >>
          target: << parameters.target >>
          configuration: << parameters.configuration >>
          ios-version: << parameters.ios-version >>
          device: << parameters.device >>
          cache-prefix: << parameters.cache-prefix >>
          bundle-install: << parameters.bundle-install >>
          bundler-working-directory: << parameters.bundler-working-directory >>
          pod-install: << parameters.pod-install >>
          cocoapods-working-directory: << parameters.cocoapods-working-directory >>
          carthage-update: << parameters.carthage-update >>
          carthage-working-directory: << parameters.carthage-working-directory >>
  validate-podspec:
    description: |
      Run 'pod lib lint' on a provided .podspec file.
    parameters:
      <<: *xcode_version_parameter
      <<: *podspec_parameters
      sources:
        description: The --sources option to pass to 'pod lib lint'.
        type: string
        default: ""
      update-specs-repo:
        description: Should the CocoaPods Specs repo be updated with 'pod repo update' before running?
        type: boolean
        default: false
      additional-parameters:
        description: Any additional parameters to pass to 'pod lib lint'. e.g. --include-podspecs=Other.podspec
        type: string
        default: ""
    executor:
      name: default
      xcode-version: << parameters.xcode-version >>
    steps:
      - checkout
      - prepare-podspec:
          podspec-path: << parameters.podspec-path >>
          bundle-install: << parameters.bundle-install >>
          sources: << parameters.sources >>
      - when:
          condition: << parameters.update-specs-repo >>
          steps:
            - run:
                name: Update CocoaPods Specs
                command: <<# parameters.bundle-install >>bundle exec<</ parameters.bundle-install >> pod repo update
      - with-cocoapods-specs-cache:
          cached-steps:
            - run:
                name: Validate podspec
                command: <<# parameters.bundle-install >>bundle exec<</ parameters.bundle-install >> pod lib lint --sources="<< parameters.sources >>" --verbose << parameters.additional-parameters >> "<< parameters.podspec-path >>"
  publish-podspec:
    description: |
      Publishes the provided .podspec file to trunk using 'pod trunk push'.

      Note: A COCOAPODS_TRUNK_TOKEN environment variable should be set for your project.
    parameters:
      <<: *xcode_version_parameter
      <<: *podspec_parameters
      post-to-slack:
        description: Post to Slack with the sucessful publish. PODS_SLACK_WEBHOOK ENV variable must be set.
        type: boolean
        default: false
    executor:
      name: default
      xcode-version: << parameters.xcode-version >>
    steps:
      - checkout
      - prepare-podspec:
          podspec-path: << parameters.podspec-path >>
          bundle-install: << parameters.bundle-install >>
          sources: ""
      - run:
          name: Set Environment Variables
          command: |
            POD_NAME=$(<<# parameters.bundle-install >>bundle exec<</ parameters.bundle-install >> pod ipc spec << parameters.podspec-path >> | jq '.name')
            POD_VERSION=$(<<# parameters.bundle-install >>bundle exec<</ parameters.bundle-install >> pod ipc spec << parameters.podspec-path >> | jq '.version')

            echo "export POD_NAME=$POD_NAME" >> $BASH_ENV
            echo "export POD_VERSION=$POD_VERSION" >> $BASH_ENV
      - run:
          name: Check tag
          command: |
            # If triggered by a tag, make sure the versions match
            if [ ! -z "$CIRCLE_TAG" ] && [ "$CIRCLE_TAG" != "$POD_VERSION" ]; then
              echo "Tag $CIRCLE_TAG does not match version $POD_VERSION from << parameters.podspec-path >>."; exit 1
            fi
      - with-cocoapods-specs-cache:
          cached-steps:
            - run:
                name: Publish podspec
                command: <<# parameters.bundle-install >>bundle exec<</ parameters.bundle-install >> pod trunk push --verbose "<< parameters.podspec-path >>"
      - when:
          condition: << parameters.post-to-slack >>
          steps:
            - slack/notify:
                message: ":tada: ${POD_NAME} ${POD_VERSION} successfully published to CocoaPods trunk!\nIt will take a few minutes for this version to be deployed to the CocoaPods CDN."
                webhook: ${PODS_SLACK_WEBHOOK}
                include_project_field: false
                include_job_number_field: false
                include_visit_job_action: false

commands:
  prepare-podspec:
    description: |
      Prepare to run CococaPods commands on a .podspec file. Runs 'bundle install' and downloads/updates the CocoaPods specs repo if needed.
    parameters:
      <<: *podspec_parameters
      sources:
        description: The CocoaPods specs repos to use. e.g. https://github.com/artsy/Specs,master
        type: string
        default: ""
    steps:
      - when:
          condition: << parameters.bundle-install >>
          steps:
            -  install-dependencies:
                 pod-install: false
                 bundle-install: true
      - run:
          name: Fetch CocoaPods Specs (if needed)
          command: |
            # If no explicit source given, determine the default for this version of CocoaPods
            if [ -z "<< parameters.sources >>" ]; then
              COCOAPODS_VERSION=$(<<# parameters.bundle-install >>bundle exec<</ parameters.bundle-install >> pod --version)
              if [ $(ruby -e "puts '$COCOAPODS_VERSION' >= '1.8.0'") == "true" ]; then
                echo "No source provided and CocoaPods version is >= 1.8.0, not downloading master specs repo ..."
              else
                curl https://cocoapods-specs.circleci.com/fetch-cocoapods-repo-from-s3.sh | bash -s cf
              fi
            else
              # Source provided, check if the sources parameter includes the master specs repo
              SOURCES=$(echo "<< parameters.sources >>" | tr '[:upper:]' '[:lower:]')
              SOURCES_ARR=${SOURCES//,/ }
              if [[ " ${SOURCES_ARR[@]} " =~ " master " ]] || [[ " ${SOURCES_ARR[@]} " =~ " https://github.com/cocoapods/specs " ]]; then
                  curl https://cocoapods-specs.circleci.com/fetch-cocoapods-repo-from-s3.sh | bash -s cf
              else
                  echo "Doesn't use master specs repo. Skipping download ..."
              fi
            fi
  boot-simulator:
    description: |
      Boot an iOS simulator in the background.
    parameters:
      <<: *xcode_version_parameter
      <<: *device_parameters
    steps:
      - run:
          name: Boot simulator
          command: |
            IOS_VERSION="<< parameters.ios-version >>"
            if [ -z "$IOS_VERSION" ]; then
              # If ios-version wasn't provided, default to the latest
              IOS_VERSION=$(xcrun simctl list -j | jq -r '[.runtimes[] | select(.name|test("iOS."))] | sort_by(.version) | .[-1] | .version')
            fi

            # Get the UDID of the "<< parameters.device >>" with the correct iOS version
            DEVICES_KEY="iOS $IOS_VERSION"

            # Xcode 10.2 changes the format of `xcrun simctl list -j`
            # The 'devices' object now uses the runtime identifiers as its keys instead of the iOS version
            if [ $(ruby -e "puts '<< parameters.xcode-version >>' >= '10.2.0'") == "true" ]; then
              DEVICES_KEY=$(xcrun simctl list -j | jq -r --arg DEVICES_KEY "$DEVICES_KEY" '[.runtimes[] | select (.name==$DEVICES_KEY)][0] | .identifier')
            fi

            UDID=$(xcrun simctl list -j | jq -r --arg DEVICES_KEY "$DEVICES_KEY" '[.devices[$DEVICES_KEY][] | select(.name | test("<< parameters.device >>"; "i")) | select (.isAvailable == true or .availability == "available")][0] | .udid')

            xcrun simctl boot $UDID # Boot simulator in the background
            echo "export SIMULATOR_UDID=$UDID" >> $BASH_ENV
          background: true
  wait-for-simulator:
    description: |
      Wait for the iOS Simulator booted with 'boot-simulator' to finish launching.
    steps:
      - run:
          name: Wait for simulator
          command: |
            touch $BASH_ENV
            while [ -z "$SIMULATOR_UDID" ]; do
                sleep 1
                source $BASH_ENV
            done
  xcodebuild:
    description: |
      Run xcodebuild with the provided parameters
    parameters:
      command:
        description: The xcodebuild command to run. e.g. build, build-for-testing, test
        type: string
        default: build
      arguments:
        description: The arguments to pass to xcodebuild. e.g. '-workspace Sample.xcworkspace -scheme MyScheme'
        type: string
    steps:
      - run:
          name: "xcodebuild: << parameters.command >>"
          command: |
            mkdir -p logs
            xcodebuild COMPILER_INDEX_STORE_ENABLE=NO << parameters.command >> << parameters.arguments >> | tee logs/<< parameters.command >>.log | xcpretty -r junit
  save-xcodebuild-artifacts:
    description: |
      Save artifacts logs, crash reports and test results generated by xcodebuild
    steps:
      - store_test_results:
          path: build/reports
      - store_artifacts:
          name: Save xcodebuild logs
          path: logs
          destination: logs
      - store_artifacts:
          name: Save crash logs
          path: ~/Library/Logs/DiagnosticReports/
          destination: crashes
  test:
    description: |
      Build and test an iOS project using xcodebuild
    parameters:
      <<: *test_parameters
    steps:
      # xcodebuild can behave unpredictably if the simulator is not already booted, so we boot it explicitly here
      - boot-simulator:
          xcode-version: << parameters.xcode-version >>
          ios-version: << parameters.ios-version >>
          device: << parameters.device >>
      - install-dependencies:
          cache-prefix: << parameters.cache-prefix >>-<< parameters.xcode-version >>
          bundle-install: << parameters.bundle-install >>
          bundler-working-directory: << parameters.bundler-working-directory >>
          pod-install: << parameters.pod-install >>
          cocoapods-working-directory: << parameters.cocoapods-working-directory >>
          carthage-update: << parameters.carthage-update >>
          carthage-working-directory: << parameters.carthage-working-directory >>
      - run:
          name: Prepare xcodebuild parameters
          command: |
            optional_argument () {
              OPTION="$1"
              VALUE="$2"
              if [[ ! -z "$VALUE" ]]; then
                echo -n "${OPTION} '${VALUE}'"
              fi
            }

            XCODEBUILD_ARGS=""
            XCODEBUILD_ARGS="${XCODEBUILD_ARGS} $(optional_argument "-workspace" "<< parameters.workspace >>")"
            XCODEBUILD_ARGS="${XCODEBUILD_ARGS} $(optional_argument "-project" "<< parameters.project >>")"
            XCODEBUILD_ARGS="${XCODEBUILD_ARGS} $(optional_argument "-scheme" "<< parameters.scheme >>")"
            XCODEBUILD_ARGS="${XCODEBUILD_ARGS} $(optional_argument "-target" "<< parameters.target >>")"
            XCODEBUILD_ARGS="${XCODEBUILD_ARGS} -configuration '<< parameters.configuration >>'"
            XCODEBUILD_ARGS="${XCODEBUILD_ARGS} -sdk iphonesimulator"

            echo "export XCODEBUILD_ARGS='${XCODEBUILD_ARGS}'" >> $BASH_ENV

            echo "Finished building xcodebuild parameters:"
            echo "${XCODEBUILD_ARGS}"
      - xcodebuild:
          command: build-for-testing
          arguments: $XCODEBUILD_ARGS
      - wait-for-simulator
      - xcodebuild:
          command: test-without-building
          arguments: $XCODEBUILD_ARGS -destination "platform=iOS Simulator,id=$SIMULATOR_UDID"
      - save-xcodebuild-artifacts
  with-cocoapods-specs-cache:
    parameters:
      cached-steps:
        description: Steps that will be run after the specs cache is restored, but before it is saved.
        type: steps
        default: []
      cache-prefix:
        description: A prefix to use for the CocoaPods specs cache key.
        type: string
        default: cocoapods-specs
    steps:
      - run:
          name: Generate CocoaPods Specs cache
          command: |
            if [ "$SKIP_POD_INSTALL" = true ]; then
              # If we are skipping pod install, use a random cache key so we don't waste time downloading the cache
              uuidgen > specs-cache-key.txt
            else
              echo "pod-spec-cache" > specs-cache-key.txt
            fi
      - restore_cache:
          name: Restore CocoaPods Specs cache
          keys:
            - << parameters.cache-prefix >>-{{ checksum "specs-cache-key.txt" }}-{{ .Branch }}-{{ .Revision }}
            - << parameters.cache-prefix >>-{{ checksum "specs-cache-key.txt" }}-{{ .Branch }}
            - << parameters.cache-prefix >>-{{ checksum "specs-cache-key.txt" }}
      - steps: << parameters.cached-steps >>
      - save_cache:
                name: Save CocoaPods Specs cache
                key: << parameters.cache-prefix >>-{{ checksum "specs-cache-key.txt" }}-{{ .Branch }}-{{ .Revision }}
                paths:
                  - ~/Library/Caches/CocoaPods
                  - ~/.cocoapods/repos/trunk

  install-dependencies:
    description: |
      Installs dependencies in the current workspace and caches the results.
    parameters:
      <<: *dependency_parameters
    steps:
      - when:
          condition: << parameters.bundle-install >>
          steps:
            - restore_cache:
                name: Restore Bundler cache
                keys:
                  - << parameters.cache-prefix >>-bundler-{{ arch }}-{{ checksum "<< parameters.bundler-working-directory >>/Gemfile.lock" }}
                  - << parameters.cache-prefix >>-bundler-{{ arch }}-
            - run:
                name: Bundle install
                command: cd "<< parameters.bundler-working-directory >>" && bundle install --path=vendor/bundle
            - save_cache:
                name: Save Bundler cache
                key: << parameters.cache-prefix >>-bundler-{{ arch }}-{{ checksum "<< parameters.bundler-working-directory >>/Gemfile.lock" }}
                paths:
                  - << parameters.bundler-working-directory >>/vendor/bundle
      - when:
          condition: << parameters.pod-install >>
          steps:
            - restore_cache:
                name: Restore CocoaPods cache
                keys:
                  - << parameters.cache-prefix >>-pods-{{ arch }}-{{ checksum "<< parameters.cocoapods-working-directory >>/Podfile.lock" }}
            - run:
                name: CocoaPods check
                command: |
                  cd "<< parameters.cocoapods-working-directory >>"

                  function lockfile_error () {
                    echo "Podfile and Podfile.lock do not match. Please run 'pod install' and try again."
                  }
                  trap lockfile_error ERR

                  # This verifies that the PODFILE CHECKSUM in Podfile.lock matches Podfile
                  PODFILE_SHA1=$(ruby -e "require 'yaml';puts YAML.load_file('Podfile.lock')['PODFILE CHECKSUM']")
                  echo "$PODFILE_SHA1 *Podfile" | shasum -c

                  # Remove trap (so we don't print the lockfile error)
                  trap - ERR

                  if diff Podfile.lock Pods/Manifest.lock; then
                    echo "Podfile.lock matches Pods/Manifest.lock. Skipping installing pods ..."
                    echo 'export SKIP_POD_INSTALL=true' >> $BASH_ENV
                  else
                    echo "Podfile.lock does not match Pods/Manifest.lock. Pods will be installed ..."
                  fi
            - with-cocoapods-specs-cache:
                cache-prefix: << parameters.cache-prefix >>
                cached-steps:
                  - run:
                      name: Fetch CocoaPods Specs (if needed)
                      command: |
                        cd "<< parameters.cocoapods-working-directory >>"

                        USES_MASTER_SPECS=$(ruby -e "require 'yaml';repos = YAML.load_file('Podfile.lock')['SPEC REPOS'];puts (repos.nil? || repos.keys.map(&:downcase).include?('https://github.com/cocoapods/specs.git'))")

                        if [ "$SKIP_POD_INSTALL" = true ]; then
                          echo "Pod install is skipped, not downloading specs."
                        elif [ "$USES_MASTER_SPECS" = false ]; then
                          echo "Podfile.lock does not use the master specs repo, skipping download."
                        else
                          curl https://cocoapods-specs.circleci.com/fetch-cocoapods-repo-from-s3.sh | bash -s cf
                        fi
                  - run:
                      name: Pod Install (if needed)
                      command: |
                        cd "<< parameters.cocoapods-working-directory >>"

                        if [ "$SKIP_POD_INSTALL" = true ]; then
                          echo "Skipping pod install ..."
                        else
                          # Get the shasum of Podfile.lock before installing pods
                          LOCKFILE_SHASUM=$(shasum Podfile.lock)

                          # Install pods
                          set +e
                          <<# parameters.bundle-install >>bundle exec<</ parameters.bundle-install >> pod install
                          result=$?  
                          set -e
                          if [ $result -ne 0 ]; then
                            # Clean the repo trunk
                            <<# parameters.bundle-install >>bundle exec<</ parameters.bundle-install >> pod repo remove trunk

                            # Retry install
                            <<# parameters.bundle-install >>bundle exec<</ parameters.bundle-install >> pod install
                          fi

                          # Check that Podfile.lock was unchanged by pod install
                          function lockfile_error () {
                            echo "Podfile.lock was changed by 'pod install'. Please run 'pod install' and try again."
                          }
                          trap lockfile_error ERR

                          echo
                          echo "Checking that Podfile.lock was not modified by 'pod install'"
                          echo "${LOCKFILE_SHASUM}" | shasum -c > /dev/null
                        fi
                      environment:
                        COCOAPODS_DISABLE_STATS: true
                  - save_cache:
                      name: Save CocoaPods cache
                      key: << parameters.cache-prefix >>-pods-{{ arch }}-{{ checksum "<< parameters.cocoapods-working-directory >>/Podfile.lock" }}
                      paths:
                        - << parameters.cocoapods-working-directory >>/Pods/
      - when:
          condition: << parameters.carthage-update >>
          steps:
            - restore_cache:
                name: Restore Carthage cache
                keys:
                  - << parameters.cache-prefix >>-carthage-{{ arch }}-{{ checksum "<< parameters.carthage-working-directory >>/Cartfile.resolved" }}
            - run:
                name: Carthage Update
                command: cd "<< parameters.carthage-working-directory >>" && carthage update --cache-builds
            - save_cache:
                name: Save Carthage cache
                key: << parameters.cache-prefix >>-carthage-{{ arch }}-{{ checksum "<< parameters.carthage-working-directory >>/Cartfile.resolved" }}
                paths:
                  - << parameters.carthage-working-directory >>/Carthage/
