version: 2.1

description: |
  Simplify common tasks for building and testing Android projects

executors:
  default:
    description: An executor with sensible defaults for Android Gradle tasks (set with GRADLE_OPTS).
    parameters:
      api-version:
        description: The Android API version to use.
        type: string
        default: "27"
    docker:
      - image: circleci/android:api-<<parameters.api-version>>
        environment:
          # kotlin.incremental=false and kotlin.compiler.execution.strategy=in-process are required due to an issue with the Kotlin compiler in
          # memory constrained environments: https://youtrack.jetbrains.com/issue/KT-15562
          GRADLE_OPTS: -Xmx1536m -XX:+HeapDumpOnOutOfMemoryError -Dorg.gradle.caching=true -Dorg.gradle.configureondemand=true -Dkotlin.compiler.execution.strategy=in-process -Dkotlin.incremental=false

commands:
  generate-gradle-checksums:
    steps:
      - run:
          name: Generate Gradle checksums
          command: |
            # This finds all *.gradle files (apart from the root build.gradle) and generates checksums for caching
            find . -mindepth 2 -name "*.gradle" -type f | sort | xargs shasum > gradle-checksums.txt
            cat gradle-checksums.txt
            # Output the current date in order to prevent a very stale cache
            date +"%Y/%m/%d" > date.txt
  restore-gradle-cache:
    description: Restore the cache of ~/.gradle based on the local build files.
    parameters:
      cache-prefix:
        type: string
        default: gradle-{{ .Environment.CIRCLE_JOB }}
    steps:
      - generate-gradle-checksums
      - restore_cache:
          keys:
            - <<parameters.cache-prefix>>-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}-{{ checksum "build.gradle" }}-{{ checksum "gradle-checksums.txt" }}-{{ checksum "date.txt" }}
            - <<parameters.cache-prefix>>-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}-{{ checksum "build.gradle" }}-{{ checksum "gradle-checksums.txt" }}
            - <<parameters.cache-prefix>>-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}-{{ checksum "build.gradle" }}-
            - <<parameters.cache-prefix>>-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}-
  save-gradle-cache:
    description: Cache the contents of ~/.gradle based on the local build files.
    parameters:
      cache-prefix:
        type: string
        default: gradle-{{ .Environment.CIRCLE_JOB }}
    steps:
      - save_cache:
          paths:
            - ~/.gradle
          key: <<parameters.cache-prefix>>-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}-{{ checksum "build.gradle" }}-{{ checksum "gradle-checksums.txt" }}-{{ checksum "date.txt" }}
  save-test-results:
    description: Store the results of Gradle test tasks as artifacts and test results on CircleCI.
    steps:
      - run:
          name: Save test results
          command: |
            mkdir -p ~/junit/
            find . -type f -regex ".*/build/test-results/.*xml" -exec cp {} ~/junit/ \;
          when: always
      - store_test_results:
          path: ~/junit
      - store_artifacts:
          path: ~/junit
  save-lint-results:
    description: Store the results of Gradle lint tasks as artifacts on CircleCI.
    steps:
      - run:
          name: Save lint results
          command: |
            mkdir -p ~/lint/
            find . -type f -regex ".*/build/reports/.*" -exec cp {} ~/lint/ \;
          when: always
      - store_artifacts:
          path: ~/lint
  firebase-test:
    description: |
      Invoke a test in Firebase Test Lab for Android. See https://cloud.google.com/sdk/gcloud/reference/firebase/test/android/run.
    parameters:
      key-file:
        description: Path to the key file to be passed to "gcloud auth activate-service-account"
        type: string
      type:
        type: string
        default: instrumentation
      apk-path:
        type: string
      test-apk-path:
        type: string
      device:
        description: |
          Single device specifier (e.g. `model=blueline,version=28,orientation=portrait,locale=en_US`), to run the tests on a single device.
          Ignored when you provide a value for `devices`. Obsolete, prefer using `devices` instead.
 
          Can be combined with `locales` to build a matrix of device specifiers for a single device but multiple locales.
        default: ""
        type: string
      devices:
        description: |
          Space-or-newline-separated list of device specifiers, to run the tests on a multiple devices. Takes precedence over the `device` parameter.
          e.g. `model=blueline,version=28,orientation=portrait,locale=en_US model=blueline,version=29,orientation=landscape,locale=ar`.

          When a `locales` parameter is also provided, the specifiers in this list are supposed to *not* contain the locale dimension, and the command
          will build a matrix of the `devices` list and the `locales` list to generate tests on all possible combinations of both lists.
        default: ""
        type: string
      locales:
        description: |
          Space-or-newline-separated list of locale codes to combine with the list of `devices`. e.g. `ar en_US fr_FR`.

          When provided, the command will build a matrix of the `devices` list and the `locales` list to generate tests on all possible combinations
          of both dimensions, by appending the `,locale=â€¦` dimension to each device specifier provided in the `devices` list for each locale.
        type: string
        default: ""
      project:
        type: string
      timeout:
        type: string
        default: 15m
      num-flaky-test-attempts:
        type: integer
        default: 0
      results-history-name:
        type: string
        default: ""
      test-targets:
        type: string
        default: ""
      no-record-video:
        type: boolean
        default: false
      additional-parameters:
        description: Additional parameters for "gcloud firebase test android run"
        type: string
        default: ""
    steps:
      - run:
          name: Authenticate gcloud
          command: gcloud auth activate-service-account --key-file "<<parameters.key-file>>"
      - run:
          name: Run tests on Firebase Test Lab
          no_output_timeout: 1h # Set to a large value as firebase manages its own timeout.
          command: |
            optional_argument () {
              OPTION="$1"
              VALUE="$2"
              if [[ ! -z "$VALUE" ]]; then
                echo -n "${OPTION} \"${VALUE}\""
              fi
            }

            device_arguments() {
              DEVICE="<<parameters.device>>"
              DEVICES="<<parameters.devices>>"
              LOCALES="<<parameters.locales>>"

              if [ -z "$DEVICES" ]; then
                DEVICES=$DEVICE
              fi
              if [ -z "$LOCALES" ]; then
                for device in $DEVICES; do
                  echo -n "--device \"$device\" "
                done
              else
                for device in $DEVICES; do
                  for locale in $LOCALES; do
                    echo -n "--device \"$device,locale=$locale\" "
                  done
                done
              fi
            }

            COMMAND="gcloud firebase test android run"
            COMMAND="${COMMAND} --type \"<<parameters.type>>\""
            COMMAND="${COMMAND} --app \"<<parameters.apk-path>>\""
            COMMAND="${COMMAND} --test \"<<parameters.test-apk-path>>\""
            COMMAND="${COMMAND} --timeout \"<<parameters.timeout>>\""
            COMMAND="${COMMAND} $(device_arguments)"
            COMMAND="${COMMAND} --project \"<<parameters.project>>\""
            COMMAND="${COMMAND} --verbosity info"
            COMMAND="${COMMAND} <<parameters.additional-parameters>>"
            COMMAND="${COMMAND} <<# parameters.no-record-video >>--no-record-video<</ parameters.no-record-video >>"
            COMMAND="${COMMAND} $(optional_argument --results-history-name "<<parameters.results-history-name>>")"
            COMMAND="${COMMAND} $(optional_argument --test-targets "<<parameters.test-targets>>")"
            COMMAND="${COMMAND} $(optional_argument --num-flaky-test-attempts "<<parameters.num-flaky-test-attempts>>")"

            echo "${COMMAND}"
            echo
            eval "${COMMAND}" |& tee log.txt
      - run:
          name: Gather Firebase test results
          when: always
          command: |
            mkdir ~/results

            TEST_BUCKET=$(cat log.txt | grep -o "gs://test\-lab\-.*/" | head -1)
            gsutil -m cp -r -U "$TEST_BUCKET**test_result*.xml" ~/results
      - store_test_results:
          path: ~/results
      - store_artifacts:
          path: ~/results
